### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Category {
  description: String
  icon: String
  id: Int!
  images(after: ImageCatWhereUniqueInput, before: ImageCatWhereUniqueInput, first: Int, last: Int): [ImageCat!]!
  name: String!
  parent: Int
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
  url: String!
}

input CategoryCreateInput {
  description: String
  icon: String
  images: ImageCatCreateManyWithoutCategoryInput
  name: String!
  parent: Int
  products: ProductCreateManyWithoutCategoriesInput
  url: String!
}

input CategoryCreateManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutProductsInput!]
}

input CategoryCreateWithoutProductsInput {
  description: String
  icon: String
  images: ImageCatCreateManyWithoutCategoryInput
  name: String!
  parent: Int
  url: String!
}

input CategoryFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  description: NullableStringFilter
  icon: NullableStringFilter
  id: IntFilter
  images: ImageCatFilter
  name: StringFilter
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  parent: NullableIntFilter
  products: ProductFilter
  url: StringFilter
}

input CategoryUpdateInput {
  description: String
  icon: String
  id: Int
  images: ImageCatUpdateManyWithoutCategoryInput
  name: String
  parent: Int
  products: ProductUpdateManyWithoutCategoriesInput
  url: String
}

input CategoryUpdateManyDataInput {
  description: String
  icon: String
  id: Int
  name: String
  parent: Int
  url: String
}

input CategoryUpdateManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateWithoutProductsDataInput {
  description: String
  icon: String
  id: Int
  images: ImageCatUpdateManyWithoutCategoryInput
  name: String
  parent: Int
  url: String
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  data: CategoryUpdateWithoutProductsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  description: NullableStringFilter
  icon: NullableStringFilter
  id: IntFilter
  images: ImageCatFilter
  name: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  parent: NullableIntFilter
  products: ProductFilter
  url: StringFilter
}

input CategoryWhereUniqueInput {
  id: Int
  name: String
  url: String
}

type File {
  name: String!
  status: String!
  uid: String!
  url: String!
}

type FileConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [FileEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type FileEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: File!
}

type ImageCat {
  category: Category
  category_id: Int
  id: Int!
  url: String!
}

input ImageCatCreateManyWithoutCategoryInput {
  connect: [ImageCatWhereUniqueInput!]
  create: [ImageCatCreateWithoutCategoryInput!]
}

input ImageCatCreateWithoutCategoryInput {
  url: String!
}

input ImageCatFilter {
  every: ImageCatWhereInput
  none: ImageCatWhereInput
  some: ImageCatWhereInput
}

input ImageCatScalarWhereInput {
  AND: [ImageCatScalarWhereInput!]
  category_id: NullableIntFilter
  id: IntFilter
  NOT: [ImageCatScalarWhereInput!]
  OR: [ImageCatScalarWhereInput!]
  url: StringFilter
}

input ImageCatUpdateManyDataInput {
  id: Int
  url: String
}

input ImageCatUpdateManyWithoutCategoryInput {
  connect: [ImageCatWhereUniqueInput!]
  create: [ImageCatCreateWithoutCategoryInput!]
  delete: [ImageCatWhereUniqueInput!]
  deleteMany: [ImageCatScalarWhereInput!]
  disconnect: [ImageCatWhereUniqueInput!]
  set: [ImageCatWhereUniqueInput!]
  update: [ImageCatUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ImageCatUpdateManyWithWhereNestedInput!]
  upsert: [ImageCatUpsertWithWhereUniqueWithoutCategoryInput!]
}

input ImageCatUpdateManyWithWhereNestedInput {
  data: ImageCatUpdateManyDataInput!
  where: ImageCatScalarWhereInput!
}

input ImageCatUpdateWithoutCategoryDataInput {
  id: Int
  url: String
}

input ImageCatUpdateWithWhereUniqueWithoutCategoryInput {
  data: ImageCatUpdateWithoutCategoryDataInput!
  where: ImageCatWhereUniqueInput!
}

input ImageCatUpsertWithWhereUniqueWithoutCategoryInput {
  create: ImageCatCreateWithoutCategoryInput!
  update: ImageCatUpdateWithoutCategoryDataInput!
  where: ImageCatWhereUniqueInput!
}

input ImageCatWhereInput {
  AND: [ImageCatWhereInput!]
  category: CategoryWhereInput
  category_id: NullableIntFilter
  id: IntFilter
  NOT: [ImageCatWhereInput!]
  OR: [ImageCatWhereInput!]
  url: StringFilter
}

input ImageCatWhereUniqueInput {
  category_id: Int
  id: Int
}

type ImageProd {
  id: Int!
  product: Product
  product_id: Int
  url: String!
}

input ImageProdCreateManyWithoutProductInput {
  connect: [ImageProdWhereUniqueInput!]
  create: [ImageProdCreateWithoutProductInput!]
}

input ImageProdCreateWithoutProductInput {
  url: String!
}

input ImageProdFilter {
  every: ImageProdWhereInput
  none: ImageProdWhereInput
  some: ImageProdWhereInput
}

input ImageProdScalarWhereInput {
  AND: [ImageProdScalarWhereInput!]
  id: IntFilter
  NOT: [ImageProdScalarWhereInput!]
  OR: [ImageProdScalarWhereInput!]
  product_id: NullableIntFilter
  url: StringFilter
}

input ImageProdUpdateManyDataInput {
  id: Int
  url: String
}

input ImageProdUpdateManyWithoutProductInput {
  connect: [ImageProdWhereUniqueInput!]
  create: [ImageProdCreateWithoutProductInput!]
  delete: [ImageProdWhereUniqueInput!]
  deleteMany: [ImageProdScalarWhereInput!]
  disconnect: [ImageProdWhereUniqueInput!]
  set: [ImageProdWhereUniqueInput!]
  update: [ImageProdUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ImageProdUpdateManyWithWhereNestedInput!]
  upsert: [ImageProdUpsertWithWhereUniqueWithoutProductInput!]
}

input ImageProdUpdateManyWithWhereNestedInput {
  data: ImageProdUpdateManyDataInput!
  where: ImageProdScalarWhereInput!
}

input ImageProdUpdateWithoutProductDataInput {
  id: Int
  url: String
}

input ImageProdUpdateWithWhereUniqueWithoutProductInput {
  data: ImageProdUpdateWithoutProductDataInput!
  where: ImageProdWhereUniqueInput!
}

input ImageProdUpsertWithWhereUniqueWithoutProductInput {
  create: ImageProdCreateWithoutProductInput!
  update: ImageProdUpdateWithoutProductDataInput!
  where: ImageProdWhereUniqueInput!
}

input ImageProdWhereInput {
  AND: [ImageProdWhereInput!]
  id: IntFilter
  NOT: [ImageProdWhereInput!]
  OR: [ImageProdWhereInput!]
  product: ProductWhereInput
  product_id: NullableIntFilter
  url: StringFilter
}

input ImageProdWhereUniqueInput {
  id: Int
  product_id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneProduct(data: ProductCreateInput!): Product!
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  uploadFile(file: Upload!, product_id: Int): String!
  uploadFiles(files: [Upload!]!, product_id: Int): [File!]!
  UploadFiles(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): [FileConnection!]!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Product {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  description: String
  icon: String
  id: Int!
  images(after: ImageProdWhereUniqueInput, before: ImageProdWhereUniqueInput, first: Int, last: Int): [ImageProd!]!
  name: String!
  price: Int!
  url: String!
}

input ProductCreateInput {
  categories: CategoryCreateManyWithoutProductsInput
  description: String
  icon: String
  images: ImageProdCreateManyWithoutProductInput
  name: String!
  price: Int!
  url: String!
}

input ProductCreateManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCategoriesInput!]
}

input ProductCreateWithoutCategoriesInput {
  description: String
  icon: String
  images: ImageProdCreateManyWithoutProductInput
  name: String!
  price: Int!
  url: String!
}

input ProductFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  categories: CategoryFilter
  description: NullableStringFilter
  icon: NullableStringFilter
  id: IntFilter
  images: ImageProdFilter
  name: StringFilter
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  price: IntFilter
  url: StringFilter
}

input ProductUpdateInput {
  categories: CategoryUpdateManyWithoutProductsInput
  description: String
  icon: String
  id: Int
  images: ImageProdUpdateManyWithoutProductInput
  name: String
  price: Int
  url: String
}

input ProductUpdateManyDataInput {
  description: String
  icon: String
  id: Int
  name: String
  price: Int
  url: String
}

input ProductUpdateManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  data: ProductUpdateManyDataInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateWithoutCategoriesDataInput {
  description: String
  icon: String
  id: Int
  images: ImageProdUpdateManyWithoutProductInput
  name: String
  price: Int
  url: String
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  data: ProductUpdateWithoutCategoriesDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  create: ProductCreateWithoutCategoriesInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  where: ProductWhereUniqueInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  categories: CategoryFilter
  description: NullableStringFilter
  icon: NullableStringFilter
  id: IntFilter
  images: ImageProdFilter
  name: StringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  price: IntFilter
  url: StringFilter
}

input ProductWhereUniqueInput {
  id: Int
  name: String
  url: String
}

type Query {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  categoryByName(name: String!): Category!
  product(where: ProductWhereUniqueInput!): Product
  productByName(name: String!): Product!
  products(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int): [Product!]!
  productsByCategoryId(category_id: Int!): [Product!]!
  productsByNameAndCategoryId(category_id: Int, name: String!): [Product!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
